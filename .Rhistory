unit.time.included <- cbind.data.frame(unique(coverage.list$Unit), rep(NA, length(unique(coverage.list$Unit))))
colnames(unit.time.included) <- c("Unit", "coverage")
for (j in unique(coverage.unit.time$Unit)){
index <- 1
beginning_time <- "not this time"
for (i in (min(as.numeric(as.character(coverage$Time)))-1):(max(as.numeric(as.character(coverage$Time))))+1){
current_time <- i
if(beginning_time == "not this time"){
beginning_time <- ifelse(length(grep(i, coverage.unit.time$Time[coverage.unit.time$Unit == j]))>0, current_time, "not this time")
} else {
if(length(grep(i, coverage.unit.time$Time[coverage.unit.time$Unit == j]))>0){
current_interval <- paste(beginning_time, current_time, sep="-")
} else {
if(beginning_time == i - 1 & length(grep(i-1, coverage.unit.time$Time[coverage.unit.time$Unit == j]))>0){
current_interval <- beginning_time
intervals[intervals$Unit == j, ][index, 2] <- current_interval
index <- index + 1
beginning_time <- "not this time"
} else {
intervals[intervals$Unit == j, ][index, 2] <- current_interval
index <- index + 1
beginning_time <- "not this time"
}
}
}
}
unit.time.included[unit.time.included$Unit == j, 2] <- paste0(unique(intervals[is.na(intervals$intervals) == FALSE & intervals$Unit == j, 2]) , collapse = ", ")
unit.time.included$n.times[unit.time.included$Unit == j] <- length(unique(coverage.list[coverage.list$Unit == j & is.na(coverage.list$Time) == FALSE, 2]))
unit.time.included$n[unit.time.included$Unit == j] <- sum(coverage.list[as.character(coverage.list$Unit) == j, 3], na.rm = TRUE)
}
# Changing column names
colnames(unit.time.included) <- c("Unit", "Covered time ", "Total time coverage", "Total Observations")
# Reordering the columns
unit.time.included <- unit.time.included[,c(1,4,3,2)]
# Reordering the rows (alphabetically)
coverage.summary <<- unit.time.included[order(as.character(unit.time.included$Unit)),]
## Printing code for visualization if requested:
if(missing(visual.source) == FALSE){
if(visual.source == TRUE){
if(missing(special.NA) == FALSE){
print("special.NA.df <- data[,c(unitvar, timevar, special.NA)]")
print("colnames(special.NA.df) <- c('Unit', 'Time', 'special.NA')")
print("coverage <- merge(coverage, special.NA.df, by=c('Unit', 'Time'), all.x = TRUE")
print("coverage.df$N <- ifelse(is.na(coverage.df$special.NA) == TRUE, NA, coverage.df$N)")
} else {
print("library(ggplot2)")
print("base_size <- 9")
print("p <- ggplot(coverage.df, aes(Time, Unit)) + geom_tile(aes(fill = N), colour = 'white') + scale_fill_gradient(low = 'white', high = 'steelblue', na.value = 'grey') + theme_grey(base_size = base_size) + labs(x = '', y = '') + scale_x_discrete(expand = c(0, 0), breaks=pretty(as.numeric(as.character(coverage$Time)), n=20)) + scale_y_discrete(expand = c(0, 0)) + theme(legend.position = 'none', axis.text.x = element_text(size = base_size * 0.8, angle = 330, hjust = 0, colour = 'grey50'), plot.margin = unit(c(5, 15, 5, 5), 'pt'))")
}
}
}
## Outputting latex table if requested
if(missing(output) == FALSE){
if(output == "latex.table"){
# If smaller than 75 rows, then one table
if(nrow(unit.time.included) < 75){
return(stargazer(unit.time.included, summary=FALSE, rownames=FALSE, font.size = "tiny"))}
# If larger than 75 rows but smaller than 150, then two tables.
if(nrow(unit.time.included) >= 75 & nrow(unit.time.included) < 150){
return(output <- c(stargazer(unit.time.included[1:round(nrow(unit.time.included)/2), ], summary=FALSE, rownames=FALSE, font.size = "tiny"),
stargazer(unit.time.included[(1+round(nrow(unit.time.included)/2)):nrow(unit.time.included), ], summary=FALSE, rownames=FALSE, font.size = "tiny")))}
# If larger than 150, then three tables.
if(nrow(unit.time.included) >= 150){
return(output <- c(stargazer(unit.time.included[1:round(nrow(unit.time.included)/3), ], summary=FALSE, rownames=FALSE, font.size = "tiny"),
stargazer(unit.time.included[(1+round(nrow(unit.time.included)/3)):(1+2*round(nrow(unit.time.included)/3)), ], summary=FALSE, rownames=FALSE, font.size = "tiny"),
stargazer(unit.time.included[(1+2*round(nrow(unit.time.included)/3)):nrow(unit.time.included), ], summary=FALSE, rownames=FALSE, font.size = "tiny")))
}
}
}
## Generating visual if requested:
if(missing(output) == FALSE){
if(output == "visual"){
suppressMessages(library(ggplot2, quietly = TRUE))
if(missing(special.NA) == FALSE){
special.NA.df <- data[,c(unitvar, timevar, special.NA)]
colnames(special.NA.df) <- c("Unit", "Time", "special.NA")
coverage <- merge(coverage, special.NA.df, by=c("Unit", "Time"), all.x = TRUE)
coverage$N <- ifelse(is.na(coverage$special.NA) == TRUE, NA, coverage$N)
base_size <- 9
p <- ggplot(coverage, aes(Time, Unit)) + geom_tile(aes(fill = N), colour = 'white') + scale_fill_gradient(low = 'white', high = 'steelblue', na.value = "lightgrey") + theme_grey(base_size = base_size) + labs(x = '', y = '') + scale_x_discrete(expand = c(0, 0), breaks=pretty(as.numeric(as.character(coverage$Time)), n=20)) + scale_y_discrete(expand = c(0, 0)) + theme(legend.position = 'none', axis.text.x = element_text(size = base_size * 0.8, angle = 330, hjust = 0, colour = 'grey50'), plot.margin = unit(c(5, 15, 5, 5), "pt"))
return(p)
} else {
base_size <- 9
p <- ggplot(coverage, aes(Time, Unit)) + geom_tile(aes(fill = N), colour = 'white') + scale_fill_gradient(low = 'white', high = 'steelblue') + theme_grey(base_size = base_size) + labs(x = '', y = '') + scale_x_discrete(expand = c(0, 0), breaks=pretty(as.numeric(as.character(coverage$Time)), n=20)) + scale_y_discrete(expand = c(0, 0)) + theme(legend.position = 'none', axis.text.x = element_text(size = base_size * 0.8, angle = 330, hjust = 0, colour = 'grey50'), plot.margin = unit(c(5, 15, 5, 5), "pt"))
return(p) }
}
}
}
coverage(timevar = "year", unitvar = "country_name",
data = techdata,
variable.names = c("upop", "xlrealgdp", "adoption_lvl"),
output = "visual")
unique(techdata)
unique(techdata$country_name)
techdata <- readRDS("3d_example.RDS")
unique(techdata$country_name)
for (i in 1:150){
techdata <- subset(techdata, techdata$country_name != sample(techdata$country_name, 1))
}
coverage(timevar = "year", unitvar = "country_name",
data = techdata,
variable.names = c("upop", "xlrealgdp", "adoption_lvl"),
output = "visual")
unique(techdata$year)
techdata <- readRDS("3d_example.RDS")
techdata$year
lol <- getwd()
setwd("C:/Users/SondreUlvund/dropbox/technology/data")
tech.pol <- readRDS("20160926.txt")
techdata <- tech.pol[, c("country_name", "year", "upop", "xlrealgdp", "adoption_lvl", "polity2")]
for (i in 1:150){
techdata <- subset(techdata, techdata$country_name != sample(techdata$country_name, 1))
}
techdata <- subset(techdata, techdata$year >= 1970)
nrow(techdata)
for (i in 1:150){
techdata <- subset(techdata, techdata$country_name != sample(techdata$country_name, 1))
}
colnames(techdata)
techdata <- subset(techdata, techdata$country_name != sample(techdata$country_name, 1))
techdata$country_name
techdata <- tech.pol[tech.pol$year >= 1970, c(colnames(techdata))]
for (i in 1:150){
techdata <- subset(techdata, techdata$country_name != sample(techdata$country_name, 1))
}
techdata <- subset(techdata, techdata$country_name != sample(techdata$country_name, 1))
for (i in 1:150){
techdata <- subset(techdata, techdata$country_name != sample(techdata$country_name, 1))
}
techdata <- tech.pol[tech.pol$year >= 1970, c(colnames(techdata))]
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1)]
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
unique(techdata$country_name)
colnames(techdata$country_name)
colnames(techdata)
nrow(techdata)
unique(techdata$country_name)
techdata <- tech.pol[tech.pol$year >= 1970, c(colnames(techdata))]
dim(techdata)
unique(techdata$country_name)
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
unique(techdata$country_name)
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
for (i in 1:150){
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
}
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
for (i in 1:10){
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
}
for (i in 1:10){
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
}
length(unique(techdata$country_name))
techdata <- tech.pol[tech.pol$year >= 1970, c(colnames(techdata))]
for (i in 1:5){
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
}
for (i in 1:5){
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
}
for (i in 1:5){
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
}
for (i in 1:5){
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
}
nrow(techdata)
length(unique(techdata$country_name))
techdata <- tech.pol[tech.pol$year >= 1970, c(colnames(techdata))]
techdata <- tech.pol[tech.pol$year >= 1970, c(colnames(techdata))]
techdata.bc <- techdata
tech.pol <- NULL
getwd()
setwd(lol)
getwd()
p <- NULL
length(unique(techdata$country_name))
for (i in 1:5){
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
}
length(unique(techdata$country_name))
for (i in 1:5){
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
}
length(unique(techdata$country_name))
for (i in 1:5){
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
}
length(unique(techdata$country_name))
techdata <- techdata.bv
techdata <- techdata.bc
techdata[ is.na(techdata$country_name) == FALSE, ]
length(unique(techdata$country_name))
techdata <- techdata[ is.na(techdata$country_name) == FALSE, ]
length(unique(techdata$country_name))
for (i in 1:50){
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
}
length(unique(techdata$country_name))
for (i in 1:50){
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
}
length(unique(techdata$country_name))
for (i in 1:50){
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
}
length(unique(techdata$country_name))
coverage(timevar = "year", unitvar = "country_name",
data = techdata,
variable.names = c("upop", "xlrealgdp", "adoption_lvl"),
output = "visual")
for (i in 1:10){
techdata <- techdata[techdata$country_name != sample(techdata$country_name, 1), ]
}
length(unique(techdata$country_name))
coverage(timevar = "year", unitvar = "country_name",
data = techdata,
variable.names = c("upop", "xlrealgdp", "adoption_lvl"),
output = "visual")
techdata$adoption_lvl[techdata$country_name == "Rwanda" & techdata$year >= 1992 & techdata$year <= 1998] <- NA
coverage(timevar = "year", unitvar = "country_name",
data = techdata,
variable.names = c("upop", "xlrealgdp", "adoption_lvl"),
output = "visual")
coverage.summary
head(techdata)
colnames(techdata)
colnames(techdata)[7] <- "government"
colnames(techdata)[6] <- "government"
saveRDS(techdata, "3d_example.RDS")
techdata.bc <- techdata
techdata[techdata$country_name == "Germany" & techdata$year < 1980, ] <- NULL
techdata <- techdata[!(techdata$country_name == "Germany" & techdata$year < 1980), ]
nrow(techdata)
nrow(techdata.bc)
techdata.ss <- techdata[techdata$country_name == "Germany" & techdata$year < 1980, ]
nrow(techdata.ss)
output = "visual", special.na = "year")
coverage(timevar = "year", unitvar = "country_name",
data = techdata,
variable.names = c("upop", "xlrealgdp", "adoption_lvl"),
output = "visual", special.na = "year")
output = "visual", special.NA = "year")
coverage(timevar = "year", unitvar = "country_name",
data = techdata,
variable.names = c("upop", "xlrealgdp", "adoption_lvl"),
output = "visual", special.NA = "year")
head(techdata)
coverage(timevar = "year", unitvar = "country_name",
data = techdata,
variable.names = c("upop", "xlrealgdp", "adoption_lvl"),
output = "visual", special.NA = "government")
head(wdi.sample)
coverage(timevar = "year", unitvar = "country",
data = wdi.sample,
variable.names = c("GDPPC",
"agriculture_gdp"),
output = "visual")
coverage(timevar = "year", unitvar = "country",
data = wdi.sample,
variable.names = c("GDPPC",
"services_gdp"),
output = "visual")
colnames(techdata)
techdata <- readRDS("3d_example.RDS")
colnames(techdata)
install_github("sondreus/coverage")
?coverage
library(coverage)
techdata <- readRDS("3d_example.RDS")
coverage(timevar = "year", unitvar = "country_name",
data = techdata,
variable.names = c("upop", "xlrealgdp", "adoption_lvl"))
debug(coverage)
coverage(timevar = "year", unitvar = "country_name",
data = techdata,
variable.names = c("upop", "xlrealgdp", "adoption_lvl"))
undebug(coverage)
coverage(timevar = "year", unitvar = "country_name",
data = techdata,
variable.names = c("upop", "xlrealgdp", "adoption_lvl"))
coverage(timevar = "year", unitvar = "country_name",
data = techdata,
variable.names = c("upop", "xlrealgdp", "adoption_lvl"))
library(coverage)
debug(coverage)
coverage(timevar = "year", unitvar = "country_name",
data = techdata,
variable.names = c("upop", "xlrealgdp", "adoption_lvl"))
data
t <- data
order(t[, timevar])
View(t)
table(data[!data$missing, unitvar], data[!data$missing, timevar])
complete.cases()
?complete.cases
View(techdata)
?order
data[, timevar]
order(1:4)
order(10:3)
library(coverage)
library(coverage)
library(coverage)
library(coverage)
?scale_x_date
library(coverage)
library(coverage)
library(coverage)
library(coverage)
library(coverage)
library(coverage)
?table
table(coverage_df$Unit)
table(coverage_df$Unit, coverage_df$Time)
table(coverage_df$Unit, coverage_df$Time, coverage_df$N)
as.data.frame(table(coverage_df$Unit, coverage_df$Time, coverage_df$N))
#' Coverage - Unit and Time
#'
#' The coverage package and associated function provides you with a visual, data frame or latex table summary of your time and unit coverage.
#' @param fit A fitted object. (Optional if dqta is supplied.)
#' @param data Data to be investigated. If none is supplied, attempts to use same data as "\code{fit}", first by considering its model matrix, and - if variables are missing (such as timevar and unitvar) - by looking for the source data in the global environment. (Optional)
#' @param timevar Time variable.
#' @param timevar.type Type of time variable. One of "numeric" and "date".
#' @param date_breaks In case of timevar.type = "date", specify the breaks for dates on x-axis.
#' @param unitvar Unit variable.
#' @param variable.names Variables to be checked for coverage. If none is supplied, defaults to variables used in \code{fit}, or if fit not provided, all variables in data. (Optional)
#' @param facet.var Variable to facet plot by
#' @param output Desired extra output: "visual" (default), "data.frame", or "latex.table". First depends on \code{ggplot2}, last \code{stargazer}, both available on CRAN.
#' @param special.NA Variable that if missing will indicate "special" missingness. Can be used to distinguish observations with missing data from time-unit combinations which did not exist or were not considered. (Optional)
#' @param data.frequency Integer specifying the increments between observations. Defaults to 1.
#' @param ... Additional arguments passed to ggplot2's \code{theme} function, or \code{stargazer}, depending on output selected. (Optional)
#' @keywords coverage lm missingness missing NA
#' @export
#' @examples
#' library(WDI)
#' wdi.sample <- WDI(indicator=c("GDPPC" = "NY.GDP.PCAP.KD",
#'                              "services_gdp" = "BG.GSR.NFSV.GD.ZS",
#'                              "agriculture_gdp" = "NV.AGR.TOTL.ZS",
#'                              "telephones" = "IT.TEL.TOTL.P3"),
#'                              start=1970, end=2012,
#'                              country="all")
#'
#' lm.fit <- lm(GDPPC ~ ., data = wdi.sample)
#'
#' coverage(lm.fit)
#'
#' # One may also specify variables explicitly:
#' coverage(timevar = "year",
#'          unitvar = "country",
#'          variable.names = c("GDPPC",
#'                   "services_gdp",
#'                   "agriculture_gdp",
#'                   "telephones"),
#'          data = wdi.sample)
#'
#' # Or request data.frame or latex.table output:
#'
#' # For data.frame, use:
#' coverage(fit = lm.fit, output = "data.frame")
#'
#' # For latex table, use:
#' coverage(fit = lm.fit, output = "latex.table")
#'
#'
coverage <- function(fit,
data,
timevar,
unitvar,
timevar.type = "numeric",
date_breaks,
variable.names,
facet.var,
special.NA,
output = c("visual", "data.frame", "latex.table")[1],
data.frequency = 1,
...) {
# Check that permissible output specified:
if (!output %in% c("visual", "data.frame", "latex.table")) {
stop("Please select an appropriate output. Alternatives are: 'visual', 'data.frame', and 'latex.table'")
}
# Check if data or fit provided
if (missing(data)) {
if (missing(fit)) {
stop("Coverage requires you to supply either data or a fitted object.")
}
}
# If not specified, get variables to consider
if (missing(variable.names)) {
# from fitted object:
if (!missing(fit)) {
variable.names <- all.vars(formula(fit))
} else {
# or just use all variables in data
variable.names <- colnames(data)
}
}
if (!missing(special.NA)) {
variable.names <- unique(c(variable.names, special.NA))
}
# Add timevar and unitvar to list of variables:
variable.names <- unique(c(variable.names, unitvar, timevar))
#  If not specified, get data to consider from fitted object:
if (missing(data)) {
# Check if all variables in model matrix & special.NA is not selected:
# (Note: special.NA would otherwise be equal to NA, and thus pointless)
if (sum(variable.names %in% all.vars(formula(fit))) == length(variable.names) & missing(special.NA)) {
if ("Zelig" %in% class(fit)) {
data <- na.omit(fit$originaldata)
} else {
data <- fit$model
}
} else { # Else attempt to find source data in parent environment:
if ("Zelig" %in% class(fit)) {
data <- as.data.frame(eval(fit$model.call[[3]], envir = parent.env(environment())))
} else {
data <- as.data.frame(eval(fit$call[[3]], envir = parent.env(environment())))
}
}
}
# Currently does not work with tibbles, because of the way subsetting is done
data <- as.data.frame(data)
# Check that timevar.type is of an accepted type
if (timevar.type == "numeric") {
if (!is.numeric(data[, timevar])) {
stop("Numeric timevar.type provided, but timevar is not numeric.")
}
} else if (timevar.type == "date") {
if (class(data[, timevar]) != "Date") {
stop("Date timevar.type provided, but timevar is not numeric.")
}
} else {
stop("timevar.type must be either 'numeric' or 'date'.")
}
# Subsetting data frame:
data <- data[order(data[, timevar]), variable.names]
# Assessing missingness:
data$missing <- !complete.cases(data)
# Check if any complete cases:
if (sum(!data$missing) == 0) {
stop("For these variables, your data has no complete cases")
}
# Generating a summary data frame detailing the unit and time combinations present in the data (and their number, if data is 3-dimensional):
if (!missing(facet.var)) {
coverage_df <- as.data.frame(table(data[!data$missing, unitvar], data[!data$missing, timevar], data[!data$missing, facet.var]))
colnames(coverage_df) <- c("Unit", "Time", "Facet", "N")
} else {
coverage_df <- as.data.frame(table(data[!data$missing, unitvar], data[!data$missing, timevar]))
colnames(coverage_df) <- c("Unit", "Time", "N")
}
coverage_df[, "Unit"] <- as.character(coverage_df$Unit)
# Adding special N column if specified:
if(missing(special.NA) == FALSE){
special.NA.df <- unique(data[,c(unitvar, timevar, special.NA)])
colnames(special.NA.df) <- c("Unit", "Time", "special.NA")
coverage_df <- merge(coverage_df, special.NA.df, all.x = TRUE, by = c("Time", "Unit"))
coverage_df$N[is.na(coverage_df$special.NA)] <- NA
}
### Generating and return visual (default):
library(ggplot2, quietly = TRUE)
# Parameter tweaked to make things a bit more pretty
base_size <- 9
#coverage_df <<- coverage_df
# Eases alphabetic sort
coverage_df$Unit <- as.factor(coverage_df$Unit)
if (timevar.type == "numeric") {
coverage_df$Time <- as.factor(coverage_df$Time)
} else {
coverage_df$Time <- as.Date(coverage_df$Time)
}
p <- ggplot(coverage_df, aes(Time, Unit)) +
geom_tile(aes(fill = N), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue", na.value = "lightgrey") +
theme_grey(base_size = base_size) + labs(x = "", y = "")
if (timevar.type == "numeric") {
p <- p +
scale_x_discrete(
expand = c(0, 0),
breaks = pretty(as.numeric(as.character(coverage_df$Time)), n = 20)
)
} else {
p <- p +
scale_x_date(date_breaks = date_breaks)
}
p <- p +
scale_y_discrete(expand = c(0, 0)) +
theme(legend.position = "none",
axis.text.x = element_text(size = base_size * 0.8, angle = 330, hjust = 0, colour = "grey50"),
axis.text.y = element_text(size = 45 / (sqrt(length(unique(coverage_df[, 1]))))),
plot.margin = unit(c(5, 15, 5, 5), "pt")) +
theme(...)
if (!missing(facet.var)) {
p <- p + facet_wrap(facet.var)
}
return(p)
}
t
library(coverage)
library(coverage)
library(coverage)
library(coverage)
library(coverage)
library(coverage)
library(coverage)
library(coverage)
library(coverage)
